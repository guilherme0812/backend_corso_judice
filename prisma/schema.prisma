generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  email          String  @unique
  password       String?
  role           Role    @default(employee)
  firstName      String
  lastName       String
  phone          String?
  hasWhatsapp    Boolean @default(false)
  profilePicture String?
  isActive       Boolean @default(true)

  lastLoginAt DateTime?
  createAt    DateTime  @default(now())
  updateAt    DateTime  @default(now())

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  Task      Task[]

  @@map("users")
}

enum Role {
  admin
  owner
  employee
}

model Company {
  id                 String    @id @default(uuid())
  name               String
  cnpj               String
  banner             String?
  countryId          String?
  stateId            String?
  cityId             String?
  address            String?
  phone1             String?
  phone2             String?
  hasWhatsapp1       Boolean   @default(false)
  hasWhatsapp2       Boolean   @default(false)
  email              String?
  website            String?
  registrationNumber String?
  taxRegime          String?
  headquarters       Boolean   @default(false)
  isActive           Boolean   @default(true)
  createdBy          String?
  updatedBy          String?
  foundedAt          DateTime?
  documentStorageUrl String?

  users     User[]
  clients   Client[]
  documents Document[]
  Case      Case[]

  lastLoginAt DateTime?
  createAt    DateTime   @default(now())
  updateAt    DateTime   @default(now())
  Attorney    Attorney[]

  @@map("companies")
}

model Client {
  document               String    @id @unique // Documento de identidade do cliente (CPF ou RG)
  officialId             String?   @unique @db.VarChar(7) //6470051
  officialIdIssuingBody  String?   @db.VarChar(100)
  officialIdissuingState String?   @db.VarChar(100)
  firstName              String
  lastName               String
  phone                  String?   @db.VarChar(20)
  email                  String?   @db.VarChar(255)
  hasWhatsapp            Boolean   @default(false)
  addressStreet          String?   @map("address") // Corrige a semântica
  addressNumber          String?   @map("number")
  addressComplement      String?
  addressZipCode         String?   @db.VarChar(20)
  zone                   String?
  birthDate              DateTime?
  notes                  String?
  nacionality            String?
  maritalStatus          String?   @db.VarChar(100)
  profession             String?   @db.VarChar(255)

  cityId    String?
  stateId   String?
  countryId String?

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  Case      Case[]

  @@map("clients")
}

model Case {
  id          String     @id @default(uuid())
  caseNumber  String     @unique
  description String
  status      CaseStatus @default(PENDING)
  openedAt    DateTime   @default(now())
  closedAt    DateTime?

  client   Client @relation(fields: [clientId], references: [document])
  clientId String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String // Empresa responsável pelo processo

  @@map("cases")
}

enum CaseStatus {
  PENDING
  OPEN
  CLOSED
}

model Document {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String

  @@map("documents")
}

model Finance {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("finances")
}

model Task {
  id          String     @id @default(uuid())
  name        String
  description String
  status      CaseStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Attorney {
  id        String @id @default(uuid())
  firstName String @map("first_name")
  lastName  String @map("last_name")

  licenceNumber       String  @unique @map("licence_number") @db.VarChar(255)
  licenceJurisdiction String  @map("licence_jurisdiction") @db.VarChar(100)
  licenceCountryCode  String? @map("licence_country_code") @db.VarChar(100)

  phone String?
  email String  @unique

  nationality         String?
  maritalStatus       String? @map("marital_status")
  professionalAddress String? @map("professional_address")

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attorneys")
}
